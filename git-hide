#!/usr/bin/env python

from __future__ import print_function

import glob
import os
import sys
import re
from os.path import basename

import argparse
from subprocess import call


def get_branch_path(branch):
    return '.git/refs/heads/{}'.format(branch)


def get_hidden_path(branch):
    return '.git/refs/hidden/{}'.format(branch)


def hide_branch(branch_str, hide_master=False):

    if '*' in branch_str:
        branches = glob.glob('.git/refs/heads/{}'.format(branch_str))
        for branch in branches:

            # User experience check
            if branch == 'master' and not hide_master:
                continue

            hide_single_branch(basename(branch))

    else:
        hide_single_branch(branch_str)


def hide_single_branch(branch):

    if not os.path.exists(get_branch_path(branch)):
        print("Branch {} does not exist".format(branch))
        return

    # Don't hide an existing branch
    if os.path.exists(get_hidden_path(branch)):
        print("Hidden branch: {} already exists".format(branch))
        return

    make_hide = "git update-ref refs/hidden/{0} {0}".format(branch)
    res = call(make_hide, shell=True)
    if res != 0:
        return

    delete_branch = "git branch -D {}".format(branch)
    res = call(delete_branch, shell=True)
    if res != 0:
        return


def restore_branch(branch_str):

    if '*' in branch_str:
        branches = glob.glob('.git/refs/hidden/{}'.format(branch_str))
        for branch in branches:
            restore_single_branch(basename(branch))
    else:
        restore_single_branch(branch_str)


def restore_single_branch(branch):

    if not os.path.exists(get_hidden_path(branch)):
        print("Hidden branch {} does not exist".format(branch))
        return

    if os.path.exists(get_branch_path(branch)):
        print("Cannot restore hidden branch {}, there is a non-hidden branch of the same name".format(branch))
        return

    source = get_hidden_path(branch)
    destination = get_branch_path(branch)
    os.rename(source, destination)


def show_hidden_branches():
    hidden = glob.glob('.git/refs/hidden/*')
    for branch in hidden:
        print(basename(branch))


def main():

    parser = argparse.ArgumentParser(description='Process some integers.')

    parser.add_argument('-b', '--branch', help='Branch to hide')

    parser.add_argument('-s', '--show', action='store_true', help='Show all hidden branches')

    parser.add_argument('-r', '--restore', help='Restore a hidden branch')

    args = parser.parse_args()

    if len([val for val in vars(args).values()
            if val]) > 1:
        print("You may only supply one argument")
        return

    if args.branch:
        hide_branch(args.branch)

    if args.restore:
        restore_branch(args.restore)

    if args.show:
        show_hidden_branches()


if __name__ == '__main__':
    main()
